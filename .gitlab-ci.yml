#
# Gitlab CI/CD : Build archive and Docker images and deploy on Openshift
#
# Pour gérer les déploiements dans les différents environnement s (d01, r01, p01),
# 3 environnements gitlab ont été créer et 
# 3 variables NAMESPACE_ENV associées sont renseignées 
# avec les 3 valeurs {d01, r01, p01}.
# Cela permet de mutualiser tous les fichiers de déploiements ainsi que toutes les étapes de build.
# le 'stage' de déploiement est manuel car on déploie des jobs qui exécutent le caclul étape par étape : 
# il faut donc pouvoir exercer un controle.

variables:
    TRIGRAMME: arb
    NAMESPACE: ns-$TRIGRAMME-$NAMESPACE_ENV
    REPLICA_ENV: 1
    DOCKER_TLS_CERTDIR: ""
    DEPLOY_NOTE:
      description: "Chaque étape est numérotée dans l'ordre d'exécution. Chaque étape redéploie la totalité de l'environnement avec un parmétrage d'étape de calcul différent."

################################################################################
#    Anchors
################################################################################
.build_and_push_image: &build_and_push_image
  # - docker build --pull --tag "$CI_REGISTRY_IMAGE/$IMAGE_NAME:latest" --build-arg NAMESPACE_ENV=$NAMESPACE_ENV --build-arg DB_HOST_ENV=$POSTGRES_SERVER --build-arg  DB_PORT_ENV=$POSTGRES_PORT --build-arg  DB_NAME_ENV=$POSTGRES_DB --build-arg  DB_USER_ENV=$POSTGRES_USER .
  - docker build --pull --tag "$CI_REGISTRY_IMAGE/$IMAGE_NAME:latest" --build-arg NAMESPACE_ENV=$NAMESPACE_ENV .
  - docker push "$CI_REGISTRY_IMAGE/$IMAGE_NAME:latest"

# Docker Authentification anchor
.docker_login: &docker_login
  - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY

# set_db_env
.set_db_env: &set_db_env
    - grep -i -E "^export [a-z0-9_]*=[a-z0-9_]*" $DB_PARAMS | grep -v "[;&]" > env.db-params.tmp; cat env.db-params.tmp; source env.db-params.tmp
    - env | sort | grep "POSTGRES_"

# Set_env_file : copying env sample file and replace values
.set_env_file: &set_env_file
    - echo "Environnement de '$CI_COMMIT_BRANCH'"
    - echo "# Configuration generated by Gitlab CI. (#$CI_BUILD_ID)" > .env 
    - echo "#" >> .env
    - cat .env.example >> .env
    - sed -i "s/__POSTGRES_DB__/$POSTGRES_DB/g" .env
    - sed -i "s/__POSTGRES_PASSWORD__/$POSTGRES_PASSWORD/g" .env
    - sed -i "s/__POSTGRES_PORT__/$POSTGRES_PORT/g" .env 
    - sed -i "s/__POSTGRES_SERVER__/$POSTGRES_SERVER-$NAMESPACE_ENV/g" .env
    - sed -i "s/__POSTGRES_USER__/$POSTGRES_USER/g" .env
    - sed -i "s/__POSTGRES_SCHEMA__/$POSTGRES_SCHEMA/g" .env
    
# Applying openshift conf anchor
  # Job for all various stages : 
  # cleanup|init-grid|init-datas|compute-factors|compute-indices|dump-datas|all
  # 0. cleanup          => Clean progress tables, clean tiles cache, before a total recalculation.
  # 1. init-grid        => Init database with each tile on all the territory
  # 2. init-datas       => Init all data with each factor
  # 3. compute-factors  => Calculates all factors
  # 5. compute-indices  => Calculates indices of each tile.
  # 6. dump-datas       => make a dump of the database. 
  # 7. all              => Launch all stages in described order above.
.apply_confs: &apply_confs
  # Secrets
  # - envsubst < deployment/secrets/database-secret.yml | oc apply -f -

  # # PVC Access
  # -  envsubst < deployment/pods/pvc-calqul.yml | oc apply -f -

  # Db
  - envsubst < deployment/pods/db-calqul.yml | oc apply -f -
  - envsubst < deployment/services/db-calqul.yml | oc apply -f -

  # Db Dev & Debug only : this maps an external port to acces remotly to the database.
  - envsubst < deployment/services/db-calqul-external.yml | oc apply -f -
  
  # Job Stage
  - envsubst < deployment/jobs/stage-calqul.yml | oc apply -f -
  
################################################################################
#    CI/CD Stages
################################################################################
stages:
  - Build Calqul
  - Deploy Calqul Buttons

# *********************************************************************************************
# * BUILD BUILD BUILD BUILD BUILD BUILD BUILD BUILD BUILD BUILD BUILD BUILD BUILD BUILD BUILD *
# *********************************************************************************************

Build Calqul Python:
  stage: Build Calqul
  environment: $CI_COMMIT_BRANCH
  variables:
    IMAGE_NAME: calqul-python-$NAMESPACE_ENV
    IMAGE_DIR: ./Dockerfiles/python
  services:
    - docker:dind
  script:
    - *set_db_env
    - *docker_login
    - cd $IMAGE_DIR
    - *set_env_file
    - *build_and_push_image
  rules:
  # utiliser $CI_ENVIRONMENT_NAME
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
      changes: # build image only if sources have changed. 
      - Dockerfiles/python/Dockerfile # Image definition has changed 
      - Dockerfiles/python/scripts/* # Python scripts have changed
      - .gitlab-ci.yml
  tags:
    - build-push-to-registry

Build Calqul Postgis:
  stage: Build Calqul
  environment: $CI_COMMIT_BRANCH
  variables:
    IMAGE_NAME: calqul-db-$NAMESPACE_ENV
    IMAGE_DIR: ./Dockerfiles/db
  services:
    - docker:dind
  script:
    - *set_db_env
    - *docker_login
    - cd $IMAGE_DIR
    - *build_and_push_image
  rules:
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
  tags:
    - build-push-to-registry

Build Calqul Git-lfs:
  stage: Build Calqul
  environment: $CI_COMMIT_BRANCH
  variables:
    IMAGE_NAME: calqul-git-lfs-$NAMESPACE_ENV
    IMAGE_DIR: ./Dockerfiles/git
  services:
    - docker:dind
  script:
    - *docker_login
    - cd $IMAGE_DIR
    - *build_and_push_image
  rules:
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
      changes: # build image only if sources have changed. 
      - Dockerfiles/git/**/* # db scripts have changed
      - .gitlab-ci.yml
  tags:
    - build-push-to-registry
# *********************************************************************************************
# * DEPLOY DEPLOY DEPLOY DEPLOY DEPLOY DEPLOY DEPLOY DEPLOY DEPLOY DEPLOY DEPLOY DEPLOY DEPLO *
# *********************************************************************************************
# Here is a reuseable section for calqul stage deployment
.deploy_setup:
  stage: Deploy Calqul Buttons
  when: manual
  environment: $CI_COMMIT_BRANCH
  script:
    - *set_db_env
    - *apply_confs
  rules:
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
  tags:
    - $DEPLOY_RUNNER

# All manual steps to recalculate map.

0. Cleanup:
  extends: .deploy_setup
  variables:
    CALQUL_ACTION: "cleanup"
    MEM_REQUEST: "256Mi"
    CPU_REQUEST: "100m"
    MEM_LIMIT: "2000Mi"
    CPU_LIMIT: 1

1. Init Grid:
  extends: .deploy_setup
  variables:
    CALQUL_ACTION: "init-grid"
    MEM_REQUEST: "1000Mi"
    CPU_REQUEST: 1
    MEM_LIMIT: "8000Mi"
    CPU_LIMIT: 4

2. Init Datas:
  extends: .deploy_setup
  variables:
    CALQUL_ACTION: "init-datas"
    MEM_REQUEST: "2000Mi"
    CPU_REQUEST: 1
    MEM_LIMIT: "8000Mi"
    CPU_LIMIT: 4

3. Compute Factors:
  extends: .deploy_setup
  variables:
    CALQUL_ACTION: "compute-factors"
    MEM_REQUEST: "2000Mi"
    CPU_REQUEST: "2000m"
    MEM_LIMIT: "8000Mi"
    CPU_LIMIT: 4

4. Compute Indices:
  extends: .deploy_setup
  variables:
    CALQUL_ACTION: "compute-indices"
    MEM_REQUEST: "1000Mi"
    CPU_REQUEST: 1
    MEM_LIMIT: "8000Mi"
    CPU_LIMIT: 4

5. Dump Datas:
  extends: .deploy_setup
  variables:
    CALQUL_ACTION: "dump-datas"
    MEM_REQUEST: "256Mi"
    CPU_REQUEST: "100m"
    MEM_LIMIT: "2000Mi"
    CPU_LIMIT: "2000m"

All Stages:
  extends: .deploy_setup
  variables:
    CALQUL_ACTION: "all"
    MEM_REQUEST: "2000Mi"
    CPU_REQUEST: 1
    MEM_LIMIT: "8000Mi"
    CPU_LIMIT: 4

